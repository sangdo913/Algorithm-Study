/*
문제 요약
1. NxM 배열
2. 로봇 청소기는 동서남북 이동 가능
3. (r,c) = 북쪽으로 r만큼 (row), 서쪽으로 c만큼 (col)
4. 로봇 청소기 동작
	1. 현재 위치 청소
	2. 왼쪽 방향부터 탐색 진행
	3. 왼쪽 청소할 공간 x -> 그 방향으로 회전하고 다시 2번
	4. 네 방향 모두 이미 청소 되었다면, 한 칸 후진하고 2번으로 돌아감
	5. 네 방향 모두 갈 수 없고, 후진도 못하며 작동 멈춤
5. 같은 곳 청소 x, 벽통과 x

입력
1. 세로 N 가로 M (3<=N,M<=50)
2. 로봇 청소기 위치 (r,c) 바라보는 방향 d (0=북 1=동 2=남 3=서)
3. 빈칸 0 벽 1

출력
1. 청소한 칸의 개수

어떻게 풀것인가?
1. 그냥 주어진 문제 조건에 맞게 시뮬레이션(재귀 사용)
*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
using namespace std;
#define SIZE 50
#define EMPTY 0
#define WALL 1
#define CLEAN 2
int N, M, cnt;
int map[SIZE][SIZE]; //0 = 빈공간 1 = 벽 2 = 청소한 구역

typedef struct position {
	int drow;
	int dcol;
	int dDir;
}position;

//문제 조건 (0 = 북 1 = 동 2 = 남 3 = 서)
//내가 변경한 조건 (0= 북 1= 서 2= 남 3 = 동)
position goNewDir[4] = {
	{0,-1,1}, //북 -> 서
	{1,0,2}, // 서-> 남
	{0,1,3}, // 남 -> 동
	{-1,0,0} // 동 -> 북
};

//동서남북 기준 뒷 방향
int back_Row[4] = {1,0, -1,0 };
int back_Col[4] = {0,1,0, -1};

void cleanPath(int row, int col, int dir)
{
	if (row < 0 || row >= N || col < 0 || col >= M) return;
	if (map[row][col] == WALL) return;
	map[row][col] = 2;

	//청소할 위치 파악
	int nRow, nCol, nDir; bool flag = false;
	for (int i = dir; i < dir + 4; i++)
	{
		nRow = row + goNewDir[i%4].drow;
		nCol = col + goNewDir[i%4].dcol;
		nDir = goNewDir[i%4].dDir;
		if (nRow < 0 || nRow >= N || nCol < 0 || nCol >= M) continue;
		if (map[nRow][nCol] == EMPTY)
		{
			//갈 수 있는 곳 찾았어!
			flag = true;
			break;
		}
	}
	if (flag == false)//4바퀴 다 돌았는데도 청소할 구역이 없을때 
	{
		//뒤로 돌아갈 수 있는지 판단
		int bRow = row + back_Row[dir];
		int bCol = col + back_Col[dir];
		if (nRow < 0 || nRow >= N || nCol < 0 || nCol >= M) return;
		if (map[bRow][bCol] == WALL)
			return;
		else 
			cleanPath(bRow, bCol, dir);
	}
	else
		cleanPath(nRow, nCol, nDir);	
}

int main()
{
	freopen("C:\\Users\\hykang\\Desktop\\input.txt", "r", stdin);
	setbuf(stdout, NULL);
	scanf("%d %d",&N,&M);
	int r, c, d;
	scanf("%d %d %d",&r,&c,&d);
	//문제에서 주어진 방향은 0 = 북 1 = 동 2 = 남 3 = 서
	//나는 문제 편의를 위해 방향 바꿈 0= 북 1= 서 2= 남 3 = 동
	if (d == 1 || d == 3) d = (d + 2) % 4;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			scanf("%d ",&map[i][j]);
	//청소구역 탐색
	cleanPath(r, c, d);
	//결과 출력
	int cnt = 0;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			if (map[i][j] == CLEAN)
				cnt++;
	printf("%d",cnt);
	return 0;
}